/*
 * generated by Xtext 2.17.1
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UpctformaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContentDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContentDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPackageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cImportsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_5_0_0 = (RuleCall)cImportsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cImportsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_5_1_1_0 = (RuleCall)cImportsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTypesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cTypesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_6_2_0 = (RuleCall)cTypesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cTypesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_6_3_1_0 = (RuleCall)cTypesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTemplatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTemplatesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cTemplatesTemplateDefParserRuleCall_7_2_0 = (RuleCall)cTemplatesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cTemplatesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cTemplatesTemplateDefParserRuleCall_7_3_1_0 = (RuleCall)cTemplatesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUnitContentUnitParserRuleCall_8_0 = (RuleCall)cUnitAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ContentDefinition:
		//	{ContentDefinition}
		//	'ContentDefinition'
		//	name=EString
		//	'{' ('package' name=QualifiedName ';')? (imports+=Import ("," imports+=Import)*)? ('types' '{' types+=Type (","
		//	types+=Type)* '}')? ('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
		//	unit=ContentUnit?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContentDefinition} 'ContentDefinition' name=EString '{' ('package' name=QualifiedName ';')? (imports+=Import (","
		//imports+=Import)*)? ('types' '{' types+=Type ("," types+=Type)* '}')? ('templates' '{' templates+=TemplateDef (","
		//templates+=TemplateDef)* '}')? unit=ContentUnit? '}'
		public Group getGroup() { return cGroup; }
		
		//{ContentDefinition}
		public Action getContentDefinitionAction_0() { return cContentDefinitionAction_0; }
		
		//'ContentDefinition'
		public Keyword getContentDefinitionKeyword_1() { return cContentDefinitionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'package'
		public Keyword getPackageKeyword_4_0() { return cPackageKeyword_4_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_4_1_0() { return cNameQualifiedNameParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
		
		//(imports+=Import ("," imports+=Import)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//imports+=Import
		public Assignment getImportsAssignment_5_0() { return cImportsAssignment_5_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_0_0() { return cImportsImportParserRuleCall_5_0_0; }
		
		//("," imports+=Import)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_5_1_1() { return cImportsAssignment_5_1_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_1_1_0() { return cImportsImportParserRuleCall_5_1_1_0; }
		
		//('types' '{' types+=Type ("," types+=Type)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'types'
		public Keyword getTypesKeyword_6_0() { return cTypesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//types+=Type
		public Assignment getTypesAssignment_6_2() { return cTypesAssignment_6_2; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_2_0() { return cTypesTypeParserRuleCall_6_2_0; }
		
		//("," types+=Type)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_6_3_1() { return cTypesAssignment_6_3_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_3_1_0() { return cTypesTypeParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'templates'
		public Keyword getTemplatesKeyword_7_0() { return cTemplatesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//templates+=TemplateDef
		public Assignment getTemplatesAssignment_7_2() { return cTemplatesAssignment_7_2; }
		
		//TemplateDef
		public RuleCall getTemplatesTemplateDefParserRuleCall_7_2_0() { return cTemplatesTemplateDefParserRuleCall_7_2_0; }
		
		//("," templates+=TemplateDef)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//templates+=TemplateDef
		public Assignment getTemplatesAssignment_7_3_1() { return cTemplatesAssignment_7_3_1; }
		
		//TemplateDef
		public RuleCall getTemplatesTemplateDefParserRuleCall_7_3_1_0() { return cTemplatesTemplateDefParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//unit=ContentUnit?
		public Assignment getUnitAssignment_8() { return cUnitAssignment_8; }
		
		//ContentUnit
		public RuleCall getUnitContentUnitParserRuleCall_8_0() { return cUnitContentUnitParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRecordTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCompositeType_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Type:
		//	Type_Impl | SimpleType | RecordType | WidgetType | ListType | CompositeType_Impl;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_Impl | SimpleType | RecordType | WidgetType | ListType | CompositeType_Impl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type_Impl
		public RuleCall getType_ImplParserRuleCall_0() { return cType_ImplParserRuleCall_0; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
		
		//RecordType
		public RuleCall getRecordTypeParserRuleCall_2() { return cRecordTypeParserRuleCall_2; }
		
		//WidgetType
		public RuleCall getWidgetTypeParserRuleCall_3() { return cWidgetTypeParserRuleCall_3; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_4() { return cListTypeParserRuleCall_4; }
		
		//CompositeType_Impl
		public RuleCall getCompositeType_ImplParserRuleCall_5() { return cCompositeType_ImplParserRuleCall_5; }
	}
	public class ContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentElement_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cComposite_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVideoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSimpleElement_ImplParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPlaceHolderParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cGameParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRecordValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cListValueParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cNumberParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLiteralParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//ContentElement:
		//	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | PlaceHolder |
		//	Row | Game | RecordValue | ListValue | Number | Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | PlaceHolder | Row |
		//Game | RecordValue | ListValue | Number | Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContentElement_Impl
		public RuleCall getContentElement_ImplParserRuleCall_0() { return cContentElement_ImplParserRuleCall_0; }
		
		//Column
		public RuleCall getColumnParserRuleCall_1() { return cColumnParserRuleCall_1; }
		
		//Image
		public RuleCall getImageParserRuleCall_2() { return cImageParserRuleCall_2; }
		
		//Widget
		public RuleCall getWidgetParserRuleCall_3() { return cWidgetParserRuleCall_3; }
		
		//Text
		public RuleCall getTextParserRuleCall_4() { return cTextParserRuleCall_4; }
		
		//Composite_Impl
		public RuleCall getComposite_ImplParserRuleCall_5() { return cComposite_ImplParserRuleCall_5; }
		
		//Video
		public RuleCall getVideoParserRuleCall_6() { return cVideoParserRuleCall_6; }
		
		//SimpleElement_Impl
		public RuleCall getSimpleElement_ImplParserRuleCall_7() { return cSimpleElement_ImplParserRuleCall_7; }
		
		//PlaceHolder
		public RuleCall getPlaceHolderParserRuleCall_8() { return cPlaceHolderParserRuleCall_8; }
		
		//Row
		public RuleCall getRowParserRuleCall_9() { return cRowParserRuleCall_9; }
		
		//Game
		public RuleCall getGameParserRuleCall_10() { return cGameParserRuleCall_10; }
		
		//RecordValue
		public RuleCall getRecordValueParserRuleCall_11() { return cRecordValueParserRuleCall_11; }
		
		//ListValue
		public RuleCall getListValueParserRuleCall_12() { return cListValueParserRuleCall_12; }
		
		//Number
		public RuleCall getNumberParserRuleCall_13() { return cNumberParserRuleCall_13; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_14() { return cLiteralParserRuleCall_14; }
	}
	public class CompositeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.CompositeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompositeType:
		//	CompositeType_Impl | RecordType | ListType;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeType_Impl | RecordType | ListType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeType_Impl
		public RuleCall getCompositeType_ImplParserRuleCall_0() { return cCompositeType_ImplParserRuleCall_0; }
		
		//RecordType
		public RuleCall getRecordTypeParserRuleCall_1() { return cRecordTypeParserRuleCall_1; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_2() { return cListTypeParserRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TemplateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.TemplateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTemplateDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTemplateDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRowsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRowsRowParserRuleCall_4_0_0 = (RuleCall)cRowsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRowsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_4_1_1_0 = (RuleCall)cRowsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TemplateDef:
		//	{TemplateDef}
		//	'TemplateDef'
		//	name=EString
		//	'{' (rows+=Row ("," rows+=Row)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TemplateDef} 'TemplateDef' name=EString '{' (rows+=Row ("," rows+=Row)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{TemplateDef}
		public Action getTemplateDefAction_0() { return cTemplateDefAction_0; }
		
		//'TemplateDef'
		public Keyword getTemplateDefKeyword_1() { return cTemplateDefKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(rows+=Row ("," rows+=Row)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//rows+=Row
		public Assignment getRowsAssignment_4_0() { return cRowsAssignment_4_0; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_0_0() { return cRowsRowParserRuleCall_4_0_0; }
		
		//("," rows+=Row)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//rows+=Row
		public Assignment getRowsAssignment_4_1_1() { return cRowsAssignment_4_1_1; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_1_1_0() { return cRowsRowParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContentUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuthorEStringParserRuleCall_2_0 = (RuleCall)cAuthorAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeContentUnitTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cLanguageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLanguageLanguageTypeEnumRuleCall_4_0 = (RuleCall)cLanguageAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSectionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSectionsSectionParserRuleCall_6_0 = (RuleCall)cSectionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSectionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_7_1_0 = (RuleCall)cSectionsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ContentUnit:
		//	'Unit'
		//	name=EString
		//	author=EString
		//	type=ContentUnitType
		//	language=LanguageType
		//	'{'
		//	sections+=Section ("," sections+=Section)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Unit' name=EString author=EString type=ContentUnitType language=LanguageType '{' sections+=Section (","
		//sections+=Section)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//author=EString
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }
		
		//EString
		public RuleCall getAuthorEStringParserRuleCall_2_0() { return cAuthorEStringParserRuleCall_2_0; }
		
		//type=ContentUnitType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ContentUnitType
		public RuleCall getTypeContentUnitTypeEnumRuleCall_3_0() { return cTypeContentUnitTypeEnumRuleCall_3_0; }
		
		//language=LanguageType
		public Assignment getLanguageAssignment_4() { return cLanguageAssignment_4; }
		
		//LanguageType
		public RuleCall getLanguageLanguageTypeEnumRuleCall_4_0() { return cLanguageLanguageTypeEnumRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_6() { return cSectionsAssignment_6; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_6_0() { return cSectionsSectionParserRuleCall_6_0; }
		
		//("," sections+=Section)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_7_1() { return cSectionsAssignment_7_1; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_7_1_0() { return cSectionsSectionParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class Type_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Type_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Type_Impl Type:
		//	{Type}
		//	'Type'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} 'Type' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_3_0_0 = (RuleCall)cColumnsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_1_1_0 = (RuleCall)cColumnsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsetemplateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUsetemplateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUsetemplateUseTemplateParserRuleCall_4_1_0 = (RuleCall)cUsetemplateAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Row:
		//	{Row}
		//	'row'
		//	'{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Row} 'row' '{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Row}
		public Action getRowAction_0() { return cRowAction_0; }
		
		//'row'
		public Keyword getRowKeyword_1() { return cRowKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(columns+=Column ("," columns+=Column)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_0() { return cColumnsAssignment_3_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_0_0() { return cColumnsColumnParserRuleCall_3_0_0; }
		
		//("," columns+=Column)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_1_1() { return cColumnsAssignment_3_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_1_1_0() { return cColumnsColumnParserRuleCall_3_1_1_0; }
		
		//('usetemplate' usetemplate=UseTemplate)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'usetemplate'
		public Keyword getUsetemplateKeyword_4_0() { return cUsetemplateKeyword_4_0; }
		
		//usetemplate=UseTemplate
		public Assignment getUsetemplateAssignment_4_1() { return cUsetemplateAssignment_4_1; }
		
		//UseTemplate
		public RuleCall getUsetemplateUseTemplateParserRuleCall_4_1_0() { return cUsetemplateUseTemplateParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWidthKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWidthEStringParserRuleCall_3_1_0 = (RuleCall)cWidthAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cElementsContentElementParserRuleCall_4_0_0 = (RuleCall)cElementsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cElementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cElementsContentElementParserRuleCall_4_1_1_0 = (RuleCall)cElementsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Column:
		//	{Column}
		//	'column'
		//	'{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Column} 'column' '{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//'column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('width' width=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'width'
		public Keyword getWidthKeyword_3_0() { return cWidthKeyword_3_0; }
		
		//width=EString
		public Assignment getWidthAssignment_3_1() { return cWidthAssignment_3_1; }
		
		//EString
		public RuleCall getWidthEStringParserRuleCall_3_1_0() { return cWidthEStringParserRuleCall_3_1_0; }
		
		//(elements+=ContentElement ("," elements+=ContentElement)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//elements+=ContentElement
		public Assignment getElementsAssignment_4_0() { return cElementsAssignment_4_0; }
		
		//ContentElement
		public RuleCall getElementsContentElementParserRuleCall_4_0_0() { return cElementsContentElementParserRuleCall_4_0_0; }
		
		//("," elements+=ContentElement)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//elements+=ContentElement
		public Assignment getElementsAssignment_4_1_1() { return cElementsAssignment_4_1_1; }
		
		//ContentElement
		public RuleCall getElementsContentElementParserRuleCall_4_1_1_0() { return cElementsContentElementParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UseTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.UseTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUseTemplateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypetemplateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypetemplateTemplateDefCrossReference_1_0 = (CrossReference)cTypetemplateAssignment_1.eContents().get(0);
		private final RuleCall cTypetemplateTemplateDefEStringParserRuleCall_1_0_1 = (RuleCall)cTypetemplateTemplateDefCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTemplateelementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTemplateelementsContentElementParserRuleCall_2_1_0 = (RuleCall)cTemplateelementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTemplateelementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTemplateelementsContentElementParserRuleCall_2_2_1_0 = (RuleCall)cTemplateelementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UseTemplate:
		//	{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' templateelements+=ContentElement (","
		//	templateelements+=ContentElement)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' templateelements+=ContentElement (","
		//templateelements+=ContentElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{UseTemplate}
		public Action getUseTemplateAction_0() { return cUseTemplateAction_0; }
		
		//typetemplate=[TemplateDef|EString]?
		public Assignment getTypetemplateAssignment_1() { return cTypetemplateAssignment_1; }
		
		//[TemplateDef|EString]
		public CrossReference getTypetemplateTemplateDefCrossReference_1_0() { return cTypetemplateTemplateDefCrossReference_1_0; }
		
		//EString
		public RuleCall getTypetemplateTemplateDefEStringParserRuleCall_1_0_1() { return cTypetemplateTemplateDefEStringParserRuleCall_1_0_1; }
		
		//('{' templateelements+=ContentElement ("," templateelements+=ContentElement)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//templateelements+=ContentElement
		public Assignment getTemplateelementsAssignment_2_1() { return cTemplateelementsAssignment_2_1; }
		
		//ContentElement
		public RuleCall getTemplateelementsContentElementParserRuleCall_2_1_0() { return cTemplateelementsContentElementParserRuleCall_2_1_0; }
		
		//("," templateelements+=ContentElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//templateelements+=ContentElement
		public Assignment getTemplateelementsAssignment_2_2_1() { return cTemplateelementsAssignment_2_2_1; }
		
		//ContentElement
		public RuleCall getTemplateelementsContentElementParserRuleCall_2_2_1_0() { return cTemplateelementsContentElementParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContentElement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentElement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContentElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContentElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContentElement_Impl ContentElement:
		//	{ContentElement}
		//	'ContentElement';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContentElement} 'ContentElement'
		public Group getGroup() { return cGroup; }
		
		//{ContentElement}
		public Action getContentElementAction_0() { return cContentElementAction_0; }
		
		//'ContentElement'
		public Keyword getContentElementKeyword_1() { return cContentElementKeyword_1; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUrlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUrlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUrlEStringParserRuleCall_3_1_0 = (RuleCall)cUrlAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeImageTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Image:
		//	{Image}
		//	'Image'
		//	'{' ('url' url=EString)? ","
		//	type=ImageType
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Image} 'Image' '{' ('url' url=EString)? "," type=ImageType '}'
		public Group getGroup() { return cGroup; }
		
		//{Image}
		public Action getImageAction_0() { return cImageAction_0; }
		
		//'Image'
		public Keyword getImageKeyword_1() { return cImageKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('url' url=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'url'
		public Keyword getUrlKeyword_3_0() { return cUrlKeyword_3_0; }
		
		//url=EString
		public Assignment getUrlAssignment_3_1() { return cUrlAssignment_3_1; }
		
		//EString
		public RuleCall getUrlEStringParserRuleCall_3_1_0() { return cUrlEStringParserRuleCall_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//type=ImageType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//ImageType
		public RuleCall getTypeImageTypeEnumRuleCall_5_0() { return cTypeImageTypeEnumRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Widget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidgetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWidgettypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWidgettypeWidgetTypeCrossReference_3_0 = (CrossReference)cWidgettypeAssignment_3.eContents().get(0);
		private final RuleCall cWidgettypeWidgetTypeEStringParserRuleCall_3_0_1 = (RuleCall)cWidgettypeWidgetTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWidgetelementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWidgetelementsContentElementParserRuleCall_4_1_0 = (RuleCall)cWidgetelementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWidgetelementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWidgetelementsContentElementParserRuleCall_4_2_1_0 = (RuleCall)cWidgetelementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Widget:
		//	'Widget'
		//	name=EString
		//	':' widgettype=[WidgetType|EString] ('{' widgetelements+=ContentElement ("," widgetelements+=ContentElement)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Widget' name=EString ':' widgettype=[WidgetType|EString] ('{' widgetelements+=ContentElement (","
		//widgetelements+=ContentElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Widget'
		public Keyword getWidgetKeyword_0() { return cWidgetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//widgettype=[WidgetType|EString]
		public Assignment getWidgettypeAssignment_3() { return cWidgettypeAssignment_3; }
		
		//[WidgetType|EString]
		public CrossReference getWidgettypeWidgetTypeCrossReference_3_0() { return cWidgettypeWidgetTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getWidgettypeWidgetTypeEStringParserRuleCall_3_0_1() { return cWidgettypeWidgetTypeEStringParserRuleCall_3_0_1; }
		
		//('{' widgetelements+=ContentElement ("," widgetelements+=ContentElement)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//widgetelements+=ContentElement
		public Assignment getWidgetelementsAssignment_4_1() { return cWidgetelementsAssignment_4_1; }
		
		//ContentElement
		public RuleCall getWidgetelementsContentElementParserRuleCall_4_1_0() { return cWidgetelementsContentElementParserRuleCall_4_1_0; }
		
		//("," widgetelements+=ContentElement)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//widgetelements+=ContentElement
		public Assignment getWidgetelementsAssignment_4_2_1() { return cWidgetelementsAssignment_4_2_1; }
		
		//ContentElement
		public RuleCall getWidgetelementsContentElementParserRuleCall_4_2_1_0() { return cWidgetelementsContentElementParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHtmlKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cHtmlAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cHtmlEStringParserRuleCall_2_1_0 = (RuleCall)cHtmlAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Text:
		//	'Text'
		//	'{' ('html' html=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Text' '{' ('html' html=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('html' html=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'html'
		public Keyword getHtmlKeyword_2_0() { return cHtmlKeyword_2_0; }
		
		//html=EString
		public Assignment getHtmlAssignment_2_1() { return cHtmlAssignment_2_1; }
		
		//EString
		public RuleCall getHtmlEStringParserRuleCall_2_1_0() { return cHtmlEStringParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumEIntParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Number:
		//	'Int' '{' num=EInt? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Int' '{' num=EInt? '}'
		public Group getGroup() { return cGroup; }
		
		//'Int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//num=EInt?
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//EInt
		public RuleCall getNumEIntParserRuleCall_2_0() { return cNumEIntParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralEStringParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Literal:
		//	'Literal' '{' literal=EString? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Literal' '{' literal=EString? '}'
		public Group getGroup() { return cGroup; }
		
		//'Literal'
		public Keyword getLiteralKeyword_0() { return cLiteralKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//literal=EString?
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//EString
		public RuleCall getLiteralEStringParserRuleCall_2_0() { return cLiteralEStringParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class Composite_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Composite_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Composite_Impl Composite:
		//	{Composite}
		//	'Composite';
		@Override public ParserRule getRule() { return rule; }
		
		//{Composite} 'Composite'
		public Group getGroup() { return cGroup; }
		
		//{Composite}
		public Action getCompositeAction_0() { return cCompositeAction_0; }
		
		//'Composite'
		public Keyword getCompositeKeyword_1() { return cCompositeKeyword_1; }
	}
	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Video");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVideoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIdKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdEStringParserRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTitleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTitleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_5_1_0 = (RuleCall)cTitleAssignment_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTypeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTypeVideoTypeEnumRuleCall_7_1_0 = (RuleCall)cTypeAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Video:
		//	{Video}
		//	'Video'
		//	'{' ('id' id=EString)? "," ('title' title=EString)? "," ('type' type=VideoType)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Video} 'Video' '{' ('id' id=EString)? "," ('title' title=EString)? "," ('type' type=VideoType)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Video}
		public Action getVideoAction_0() { return cVideoAction_0; }
		
		//'Video'
		public Keyword getVideoKeyword_1() { return cVideoKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('id' id=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'id'
		public Keyword getIdKeyword_3_0() { return cIdKeyword_3_0; }
		
		//id=EString
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_3_1_0() { return cIdEStringParserRuleCall_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//('title' title=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'title'
		public Keyword getTitleKeyword_5_0() { return cTitleKeyword_5_0; }
		
		//title=EString
		public Assignment getTitleAssignment_5_1() { return cTitleAssignment_5_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_5_1_0() { return cTitleEStringParserRuleCall_5_1_0; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//('type' type=VideoType)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'type'
		public Keyword getTypeKeyword_7_0() { return cTypeKeyword_7_0; }
		
		//type=VideoType
		public Assignment getTypeAssignment_7_1() { return cTypeAssignment_7_1; }
		
		//VideoType
		public RuleCall getTypeVideoTypeEnumRuleCall_7_1_0() { return cTypeVideoTypeEnumRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SimpleElement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SimpleElement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleElement_Impl SimpleElement:
		//	{SimpleElement}
		//	'SimpleElement';
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleElement} 'SimpleElement'
		public Group getGroup() { return cGroup; }
		
		//{SimpleElement}
		public Action getSimpleElementAction_0() { return cSimpleElementAction_0; }
		
		//'SimpleElement'
		public Keyword getSimpleElementKeyword_1() { return cSimpleElementKeyword_1; }
	}
	public class PlaceHolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.PlaceHolder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceholderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeEPrimitiveTypesParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//PlaceHolder:
		//	'Placeholder'
		//	type=[Type|EPrimitiveTypes];
		@Override public ParserRule getRule() { return rule; }
		
		//'Placeholder' type=[Type|EPrimitiveTypes]
		public Group getGroup() { return cGroup; }
		
		//'Placeholder'
		public Keyword getPlaceholderKeyword_0() { return cPlaceholderKeyword_0; }
		
		//type=[Type|EPrimitiveTypes]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type|EPrimitiveTypes]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//EPrimitiveTypes
		public RuleCall getTypeTypeEPrimitiveTypesParserRuleCall_1_0_1() { return cTypeTypeEPrimitiveTypesParserRuleCall_1_0_1; }
	}
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIdKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdEStringParserRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Game:
		//	{Game}
		//	'Game'
		//	'{' ('id' id=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Game} 'Game' '{' ('id' id=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Game}
		public Action getGameAction_0() { return cGameAction_0; }
		
		//'Game'
		public Keyword getGameKeyword_1() { return cGameKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('id' id=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'id'
		public Keyword getIdKeyword_3_0() { return cIdKeyword_3_0; }
		
		//id=EString
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_3_1_0() { return cIdEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.FieldValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldvalueContentElementParserRuleCall_2_0 = (RuleCall)cFieldvalueAssignment_2.eContents().get(0);
		
		//FieldValue:
		//	name=EString
		//	':' fieldvalue=ContentElement;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' fieldvalue=ContentElement
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//fieldvalue=ContentElement
		public Assignment getFieldvalueAssignment_2() { return cFieldvalueAssignment_2; }
		
		//ContentElement
		public RuleCall getFieldvalueContentElementParserRuleCall_2_0() { return cFieldvalueContentElementParserRuleCall_2_0; }
	}
	public class RecordValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.RecordValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecordvaluesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecordvaluesFieldValueParserRuleCall_1_0 = (RuleCall)cRecordvaluesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRecordvaluesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRecordvaluesFieldValueParserRuleCall_2_1_0 = (RuleCall)cRecordvaluesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordValue:
		//	'{'
		//	recordvalues+=FieldValue ("," recordvalues+=FieldValue)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' recordvalues+=FieldValue ("," recordvalues+=FieldValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//recordvalues+=FieldValue
		public Assignment getRecordvaluesAssignment_1() { return cRecordvaluesAssignment_1; }
		
		//FieldValue
		public RuleCall getRecordvaluesFieldValueParserRuleCall_1_0() { return cRecordvaluesFieldValueParserRuleCall_1_0; }
		
		//("," recordvalues+=FieldValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//recordvalues+=FieldValue
		public Assignment getRecordvaluesAssignment_2_1() { return cRecordvaluesAssignment_2_1; }
		
		//FieldValue
		public RuleCall getRecordvaluesFieldValueParserRuleCall_2_1_0() { return cRecordvaluesFieldValueParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListvaluesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListvaluesContentElementParserRuleCall_1_0 = (RuleCall)cListvaluesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListvaluesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListvaluesContentElementParserRuleCall_2_1_0 = (RuleCall)cListvaluesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListValue:
		//	'['
		//	listvalues+=ContentElement ("," listvalues+=ContentElement)*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' listvalues+=ContentElement ("," listvalues+=ContentElement)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//listvalues+=ContentElement
		public Assignment getListvaluesAssignment_1() { return cListvaluesAssignment_1; }
		
		//ContentElement
		public RuleCall getListvaluesContentElementParserRuleCall_1_0() { return cListvaluesContentElementParserRuleCall_1_0; }
		
		//("," listvalues+=ContentElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//listvalues+=ContentElement
		public Assignment getListvaluesAssignment_2_1() { return cListvaluesAssignment_2_1; }
		
		//ContentElement
		public RuleCall getListvaluesContentElementParserRuleCall_2_1_0() { return cListvaluesContentElementParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class WidgetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.WidgetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWidgetTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWidgetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWidgettypeelementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cWidgettypeelementsTypeCrossReference_4_0 = (CrossReference)cWidgettypeelementsAssignment_4.eContents().get(0);
		private final RuleCall cWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_4_0_1 = (RuleCall)cWidgettypeelementsTypeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWidgettypeelementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cWidgettypeelementsTypeCrossReference_5_1_0 = (CrossReference)cWidgettypeelementsAssignment_5_1.eContents().get(0);
		private final RuleCall cWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_5_1_0_1 = (RuleCall)cWidgettypeelementsTypeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WidgetType:
		//	{WidgetType}
		//	'widget'
		//	name=EString
		//	'{'
		//	widgettypeelements+=[Type|EPrimitiveTypes] ("," widgettypeelements+=[Type|EPrimitiveTypes])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{WidgetType} 'widget' name=EString '{' widgettypeelements+=[Type|EPrimitiveTypes] (","
		//widgettypeelements+=[Type|EPrimitiveTypes])* '}'
		public Group getGroup() { return cGroup; }
		
		//{WidgetType}
		public Action getWidgetTypeAction_0() { return cWidgetTypeAction_0; }
		
		//'widget'
		public Keyword getWidgetKeyword_1() { return cWidgetKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//widgettypeelements+=[Type|EPrimitiveTypes]
		public Assignment getWidgettypeelementsAssignment_4() { return cWidgettypeelementsAssignment_4; }
		
		//[Type|EPrimitiveTypes]
		public CrossReference getWidgettypeelementsTypeCrossReference_4_0() { return cWidgettypeelementsTypeCrossReference_4_0; }
		
		//EPrimitiveTypes
		public RuleCall getWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_4_0_1() { return cWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_4_0_1; }
		
		//("," widgettypeelements+=[Type|EPrimitiveTypes])*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//widgettypeelements+=[Type|EPrimitiveTypes]
		public Assignment getWidgettypeelementsAssignment_5_1() { return cWidgettypeelementsAssignment_5_1; }
		
		//[Type|EPrimitiveTypes]
		public CrossReference getWidgettypeelementsTypeCrossReference_5_1_0() { return cWidgettypeelementsTypeCrossReference_5_1_0; }
		
		//EPrimitiveTypes
		public RuleCall getWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_5_1_0_1() { return cWidgettypeelementsTypeEPrimitiveTypesParserRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CompositeType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.CompositeType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//CompositeType_Impl CompositeType:
		//	{CompositeType}
		//	'CompositeType'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeType} 'CompositeType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{CompositeType}
		public Action getCompositeTypeAction_0() { return cCompositeTypeAction_0; }
		
		//'CompositeType'
		public Keyword getCompositeTypeKeyword_1() { return cCompositeTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImageEStringParserRuleCall_4_1_0 = (RuleCall)cImageAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTitleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTitleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_5_1_0 = (RuleCall)cTitleAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTypeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeSectionTypeEnumRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cRowsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cRowsRowParserRuleCall_7_0_0 = (RuleCall)cRowsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cRowsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_7_1_1_0 = (RuleCall)cRowsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Section:
		//	{Section}
		//	'Section'
		//	name=EString
		//	'{' ('image' image=EString)? ('title' title=EString)? ('type' type=SectionType)? (rows+=Row ("," rows+=Row)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Section} 'Section' name=EString '{' ('image' image=EString)? ('title' title=EString)? ('type' type=SectionType)?
		//(rows+=Row ("," rows+=Row)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Section}
		public Action getSectionAction_0() { return cSectionAction_0; }
		
		//'Section'
		public Keyword getSectionKeyword_1() { return cSectionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('image' image=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'image'
		public Keyword getImageKeyword_4_0() { return cImageKeyword_4_0; }
		
		//image=EString
		public Assignment getImageAssignment_4_1() { return cImageAssignment_4_1; }
		
		//EString
		public RuleCall getImageEStringParserRuleCall_4_1_0() { return cImageEStringParserRuleCall_4_1_0; }
		
		//('title' title=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'title'
		public Keyword getTitleKeyword_5_0() { return cTitleKeyword_5_0; }
		
		//title=EString
		public Assignment getTitleAssignment_5_1() { return cTitleAssignment_5_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_5_1_0() { return cTitleEStringParserRuleCall_5_1_0; }
		
		//('type' type=SectionType)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'type'
		public Keyword getTypeKeyword_6_0() { return cTypeKeyword_6_0; }
		
		//type=SectionType
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }
		
		//SectionType
		public RuleCall getTypeSectionTypeEnumRuleCall_6_1_0() { return cTypeSectionTypeEnumRuleCall_6_1_0; }
		
		//(rows+=Row ("," rows+=Row)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//rows+=Row
		public Assignment getRowsAssignment_7_0() { return cRowsAssignment_7_0; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_7_0_0() { return cRowsRowParserRuleCall_7_0_0; }
		
		//("," rows+=Row)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//rows+=Row
		public Assignment getRowsAssignment_7_1_1() { return cRowsAssignment_7_1_1; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_7_1_1_0() { return cRowsRowParserRuleCall_7_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EPrimitiveTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.EPrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypesTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EPrimitiveTypes:
		//	EString | PrimitiveTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//EString | PrimitiveTypes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }
		
		//PrimitiveTypes
		public RuleCall getPrimitiveTypesTerminalRuleCall_1() { return cPrimitiveTypesTerminalRuleCall_1; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimitiveTypesTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleType:
		//	{SimpleType} name=PrimitiveTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleType} name=PrimitiveTypes
		public Group getGroup() { return cGroup; }
		
		//{SimpleType}
		public Action getSimpleTypeAction_0() { return cSimpleTypeAction_0; }
		
		//name=PrimitiveTypes
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimitiveTypes
		public RuleCall getNamePrimitiveTypesTerminalRuleCall_1_0() { return cNamePrimitiveTypesTerminalRuleCall_1_0; }
	}
	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.RecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRecordtypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecordtypeFieldParserRuleCall_2_0 = (RuleCall)cRecordtypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRecordtypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRecordtypeFieldParserRuleCall_3_1_0 = (RuleCall)cRecordtypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RecordType:
		//	name=EString
		//	'{'
		//	recordtype+=Field ("," recordtype+=Field)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{' recordtype+=Field ("," recordtype+=Field)* '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//recordtype+=Field
		public Assignment getRecordtypeAssignment_2() { return cRecordtypeAssignment_2; }
		
		//Field
		public RuleCall getRecordtypeFieldParserRuleCall_2_0() { return cRecordtypeFieldParserRuleCall_2_0; }
		
		//("," recordtype+=Field)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//recordtype+=Field
		public Assignment getRecordtypeAssignment_3_1() { return cRecordtypeAssignment_3_1; }
		
		//Field
		public RuleCall getRecordtypeFieldParserRuleCall_3_1_0() { return cRecordtypeFieldParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldtypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldtypeTypeCrossReference_2_0 = (CrossReference)cFieldtypeAssignment_2.eContents().get(0);
		private final RuleCall cFieldtypeTypeEPrimitiveTypesParserRuleCall_2_0_1 = (RuleCall)cFieldtypeTypeCrossReference_2_0.eContents().get(1);
		
		//Field:
		//	name=EString
		//	':' fieldtype=[Type|EPrimitiveTypes];
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' fieldtype=[Type|EPrimitiveTypes]
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//fieldtype=[Type|EPrimitiveTypes]
		public Assignment getFieldtypeAssignment_2() { return cFieldtypeAssignment_2; }
		
		//[Type|EPrimitiveTypes]
		public CrossReference getFieldtypeTypeCrossReference_2_0() { return cFieldtypeTypeCrossReference_2_0; }
		
		//EPrimitiveTypes
		public RuleCall getFieldtypeTypeEPrimitiveTypesParserRuleCall_2_0_1() { return cFieldtypeTypeEPrimitiveTypesParserRuleCall_2_0_1; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cList_ofKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListtypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cListtypeTypeCrossReference_3_0 = (CrossReference)cListtypeAssignment_3.eContents().get(0);
		private final RuleCall cListtypeTypeEPrimitiveTypesParserRuleCall_3_0_1 = (RuleCall)cListtypeTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListType:
		//	name=EString
		//	'{'
		//	'list_of' listtype=[Type|EPrimitiveTypes]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{' 'list_of' listtype=[Type|EPrimitiveTypes] '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'list_of'
		public Keyword getList_ofKeyword_2() { return cList_ofKeyword_2; }
		
		//listtype=[Type|EPrimitiveTypes]
		public Assignment getListtypeAssignment_3() { return cListtypeAssignment_3; }
		
		//[Type|EPrimitiveTypes]
		public CrossReference getListtypeTypeCrossReference_3_0() { return cListtypeTypeCrossReference_3_0; }
		
		//EPrimitiveTypes
		public RuleCall getListtypeTypeEPrimitiveTypesParserRuleCall_3_0_1() { return cListtypeTypeEPrimitiveTypesParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class ContentUnitTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentUnitType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInteroperabilityEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInteroperabilityInteroperabilityKeyword_0_0 = (Keyword)cInteroperabilityEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOpenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOpenOpenKeyword_1_0 = (Keyword)cOpenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPreviewEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPreviewPreviewKeyword_2_0 = (Keyword)cPreviewEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ContentUnitType:
		//	Interoperability | Open | Preview;
		public EnumRule getRule() { return rule; }
		
		//Interoperability | Open | Preview
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interoperability
		public EnumLiteralDeclaration getInteroperabilityEnumLiteralDeclaration_0() { return cInteroperabilityEnumLiteralDeclaration_0; }
		
		//'Interoperability'
		public Keyword getInteroperabilityInteroperabilityKeyword_0_0() { return cInteroperabilityInteroperabilityKeyword_0_0; }
		
		//Open
		public EnumLiteralDeclaration getOpenEnumLiteralDeclaration_1() { return cOpenEnumLiteralDeclaration_1; }
		
		//'Open'
		public Keyword getOpenOpenKeyword_1_0() { return cOpenOpenKeyword_1_0; }
		
		//Preview
		public EnumLiteralDeclaration getPreviewEnumLiteralDeclaration_2() { return cPreviewEnumLiteralDeclaration_2; }
		
		//'Preview'
		public Keyword getPreviewPreviewKeyword_2_0() { return cPreviewPreviewKeyword_2_0; }
	}
	public class VideoTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.VideoType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNormalNormalKeyword_0_0 = (Keyword)cNormalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInteractiveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInteractiveInteractiveKeyword_1_0 = (Keyword)cInteractiveEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum VideoType:
		//	Normal | Interactive;
		public EnumRule getRule() { return rule; }
		
		//Normal | Interactive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_0() { return cNormalEnumLiteralDeclaration_0; }
		
		//'Normal'
		public Keyword getNormalNormalKeyword_0_0() { return cNormalNormalKeyword_0_0; }
		
		//Interactive
		public EnumLiteralDeclaration getInteractiveEnumLiteralDeclaration_1() { return cInteractiveEnumLiteralDeclaration_1; }
		
		//'Interactive'
		public Keyword getInteractiveInteractiveKeyword_1_0() { return cInteractiveInteractiveKeyword_1_0; }
	}
	public class LanguageTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.LanguageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cESESKeyword_0_0 = (Keyword)cESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENENKeyword_1_0 = (Keyword)cENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFRFRKeyword_2_0 = (Keyword)cFREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGRGRKeyword_3_0 = (Keyword)cGREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLIEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLILIKeyword_4_0 = (Keyword)cLIEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum LanguageType:
		//	ES | EN | FR | GR | LI;
		public EnumRule getRule() { return rule; }
		
		//ES | EN | FR | GR | LI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ES
		public EnumLiteralDeclaration getESEnumLiteralDeclaration_0() { return cESEnumLiteralDeclaration_0; }
		
		//'ES'
		public Keyword getESESKeyword_0_0() { return cESESKeyword_0_0; }
		
		//EN
		public EnumLiteralDeclaration getENEnumLiteralDeclaration_1() { return cENEnumLiteralDeclaration_1; }
		
		//'EN'
		public Keyword getENENKeyword_1_0() { return cENENKeyword_1_0; }
		
		//FR
		public EnumLiteralDeclaration getFREnumLiteralDeclaration_2() { return cFREnumLiteralDeclaration_2; }
		
		//'FR'
		public Keyword getFRFRKeyword_2_0() { return cFRFRKeyword_2_0; }
		
		//GR
		public EnumLiteralDeclaration getGREnumLiteralDeclaration_3() { return cGREnumLiteralDeclaration_3; }
		
		//'GR'
		public Keyword getGRGRKeyword_3_0() { return cGRGRKeyword_3_0; }
		
		//LI
		public EnumLiteralDeclaration getLIEnumLiteralDeclaration_4() { return cLIEnumLiteralDeclaration_4; }
		
		//'LI'
		public Keyword getLILIKeyword_4_0() { return cLILIKeyword_4_0; }
	}
	public class ImageTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ImageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOriginalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOriginalOriginalKeyword_0_0 = (Keyword)cOriginalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFitFitKeyword_1_0 = (Keyword)cFitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ImageType:
		//	Original | Fit;
		public EnumRule getRule() { return rule; }
		
		//Original | Fit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Original
		public EnumLiteralDeclaration getOriginalEnumLiteralDeclaration_0() { return cOriginalEnumLiteralDeclaration_0; }
		
		//'Original'
		public Keyword getOriginalOriginalKeyword_0_0() { return cOriginalOriginalKeyword_0_0; }
		
		//Fit
		public EnumLiteralDeclaration getFitEnumLiteralDeclaration_1() { return cFitEnumLiteralDeclaration_1; }
		
		//'Fit'
		public Keyword getFitFitKeyword_1_0() { return cFitFitKeyword_1_0; }
	}
	public class SectionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBackgroundImageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBackgroundImageBackgroundImageKeyword_0_0 = (Keyword)cBackgroundImageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackgroundColourEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackgroundColourBackgroundColourKeyword_1_0 = (Keyword)cBackgroundColourEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SectionType:
		//	BackgroundImage | BackgroundColour;
		public EnumRule getRule() { return rule; }
		
		//BackgroundImage | BackgroundColour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BackgroundImage
		public EnumLiteralDeclaration getBackgroundImageEnumLiteralDeclaration_0() { return cBackgroundImageEnumLiteralDeclaration_0; }
		
		//'BackgroundImage'
		public Keyword getBackgroundImageBackgroundImageKeyword_0_0() { return cBackgroundImageBackgroundImageKeyword_0_0; }
		
		//BackgroundColour
		public EnumLiteralDeclaration getBackgroundColourEnumLiteralDeclaration_1() { return cBackgroundColourEnumLiteralDeclaration_1; }
		
		//'BackgroundColour'
		public Keyword getBackgroundColourBackgroundColourKeyword_1_0() { return cBackgroundColourBackgroundColourKeyword_1_0; }
	}
	
	private final ContentDefinitionElements pContentDefinition;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TypeElements pType;
	private final ContentElementElements pContentElement;
	private final CompositeTypeElements pCompositeType;
	private final EStringElements pEString;
	private final TemplateDefElements pTemplateDef;
	private final ContentUnitTypeElements eContentUnitType;
	private final VideoTypeElements eVideoType;
	private final LanguageTypeElements eLanguageType;
	private final ImageTypeElements eImageType;
	private final ContentUnitElements pContentUnit;
	private final Type_ImplElements pType_Impl;
	private final RowElements pRow;
	private final ColumnElements pColumn;
	private final UseTemplateElements pUseTemplate;
	private final ContentElement_ImplElements pContentElement_Impl;
	private final ImageElements pImage;
	private final WidgetElements pWidget;
	private final TextElements pText;
	private final NumberElements pNumber;
	private final LiteralElements pLiteral;
	private final EIntElements pEInt;
	private final Composite_ImplElements pComposite_Impl;
	private final VideoElements pVideo;
	private final SimpleElement_ImplElements pSimpleElement_Impl;
	private final PlaceHolderElements pPlaceHolder;
	private final GameElements pGame;
	private final FieldValueElements pFieldValue;
	private final RecordValueElements pRecordValue;
	private final ListValueElements pListValue;
	private final WidgetTypeElements pWidgetType;
	private final CompositeType_ImplElements pCompositeType_Impl;
	private final SectionTypeElements eSectionType;
	private final SectionElements pSection;
	private final TerminalRule tPrimitiveTypes;
	private final EPrimitiveTypesElements pEPrimitiveTypes;
	private final SimpleTypeElements pSimpleType;
	private final RecordTypeElements pRecordType;
	private final FieldElements pField;
	private final ListTypeElements pListType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UpctformaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContentDefinition = new ContentDefinitionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pType = new TypeElements();
		this.pContentElement = new ContentElementElements();
		this.pCompositeType = new CompositeTypeElements();
		this.pEString = new EStringElements();
		this.pTemplateDef = new TemplateDefElements();
		this.eContentUnitType = new ContentUnitTypeElements();
		this.eVideoType = new VideoTypeElements();
		this.eLanguageType = new LanguageTypeElements();
		this.eImageType = new ImageTypeElements();
		this.pContentUnit = new ContentUnitElements();
		this.pType_Impl = new Type_ImplElements();
		this.pRow = new RowElements();
		this.pColumn = new ColumnElements();
		this.pUseTemplate = new UseTemplateElements();
		this.pContentElement_Impl = new ContentElement_ImplElements();
		this.pImage = new ImageElements();
		this.pWidget = new WidgetElements();
		this.pText = new TextElements();
		this.pNumber = new NumberElements();
		this.pLiteral = new LiteralElements();
		this.pEInt = new EIntElements();
		this.pComposite_Impl = new Composite_ImplElements();
		this.pVideo = new VideoElements();
		this.pSimpleElement_Impl = new SimpleElement_ImplElements();
		this.pPlaceHolder = new PlaceHolderElements();
		this.pGame = new GameElements();
		this.pFieldValue = new FieldValueElements();
		this.pRecordValue = new RecordValueElements();
		this.pListValue = new ListValueElements();
		this.pWidgetType = new WidgetTypeElements();
		this.pCompositeType_Impl = new CompositeType_ImplElements();
		this.eSectionType = new SectionTypeElements();
		this.pSection = new SectionElements();
		this.tPrimitiveTypes = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.PrimitiveTypes");
		this.pEPrimitiveTypes = new EPrimitiveTypesElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pRecordType = new RecordTypeElements();
		this.pField = new FieldElements();
		this.pListType = new ListTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Upctforma".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ContentDefinition:
	//	{ContentDefinition}
	//	'ContentDefinition'
	//	name=EString
	//	'{' ('package' name=QualifiedName ';')? (imports+=Import ("," imports+=Import)*)? ('types' '{' types+=Type (","
	//	types+=Type)* '}')? ('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
	//	unit=ContentUnit?
	//	'}';
	public ContentDefinitionElements getContentDefinitionAccess() {
		return pContentDefinition;
	}
	
	public ParserRule getContentDefinitionRule() {
		return getContentDefinitionAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//Type:
	//	Type_Impl | SimpleType | RecordType | WidgetType | ListType | CompositeType_Impl;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ContentElement:
	//	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | PlaceHolder |
	//	Row | Game | RecordValue | ListValue | Number | Literal;
	public ContentElementElements getContentElementAccess() {
		return pContentElement;
	}
	
	public ParserRule getContentElementRule() {
		return getContentElementAccess().getRule();
	}
	
	//CompositeType:
	//	CompositeType_Impl | RecordType | ListType;
	public CompositeTypeElements getCompositeTypeAccess() {
		return pCompositeType;
	}
	
	public ParserRule getCompositeTypeRule() {
		return getCompositeTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//TemplateDef:
	//	{TemplateDef}
	//	'TemplateDef'
	//	name=EString
	//	'{' (rows+=Row ("," rows+=Row)*)?
	//	'}';
	public TemplateDefElements getTemplateDefAccess() {
		return pTemplateDef;
	}
	
	public ParserRule getTemplateDefRule() {
		return getTemplateDefAccess().getRule();
	}
	
	//enum ContentUnitType:
	//	Interoperability | Open | Preview;
	public ContentUnitTypeElements getContentUnitTypeAccess() {
		return eContentUnitType;
	}
	
	public EnumRule getContentUnitTypeRule() {
		return getContentUnitTypeAccess().getRule();
	}
	
	//enum VideoType:
	//	Normal | Interactive;
	public VideoTypeElements getVideoTypeAccess() {
		return eVideoType;
	}
	
	public EnumRule getVideoTypeRule() {
		return getVideoTypeAccess().getRule();
	}
	
	//enum LanguageType:
	//	ES | EN | FR | GR | LI;
	public LanguageTypeElements getLanguageTypeAccess() {
		return eLanguageType;
	}
	
	public EnumRule getLanguageTypeRule() {
		return getLanguageTypeAccess().getRule();
	}
	
	//enum ImageType:
	//	Original | Fit;
	public ImageTypeElements getImageTypeAccess() {
		return eImageType;
	}
	
	public EnumRule getImageTypeRule() {
		return getImageTypeAccess().getRule();
	}
	
	//ContentUnit:
	//	'Unit'
	//	name=EString
	//	author=EString
	//	type=ContentUnitType
	//	language=LanguageType
	//	'{'
	//	sections+=Section ("," sections+=Section)*
	//	'}';
	public ContentUnitElements getContentUnitAccess() {
		return pContentUnit;
	}
	
	public ParserRule getContentUnitRule() {
		return getContentUnitAccess().getRule();
	}
	
	//Type_Impl Type:
	//	{Type}
	//	'Type'
	//	name=EString;
	public Type_ImplElements getType_ImplAccess() {
		return pType_Impl;
	}
	
	public ParserRule getType_ImplRule() {
		return getType_ImplAccess().getRule();
	}
	
	//Row:
	//	{Row}
	//	'row'
	//	'{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)?
	//	'}';
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Column:
	//	{Column}
	//	'column'
	//	'{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)?
	//	'}';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//UseTemplate:
	//	{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' templateelements+=ContentElement (","
	//	templateelements+=ContentElement)*)? '}';
	public UseTemplateElements getUseTemplateAccess() {
		return pUseTemplate;
	}
	
	public ParserRule getUseTemplateRule() {
		return getUseTemplateAccess().getRule();
	}
	
	//ContentElement_Impl ContentElement:
	//	{ContentElement}
	//	'ContentElement';
	public ContentElement_ImplElements getContentElement_ImplAccess() {
		return pContentElement_Impl;
	}
	
	public ParserRule getContentElement_ImplRule() {
		return getContentElement_ImplAccess().getRule();
	}
	
	//Image:
	//	{Image}
	//	'Image'
	//	'{' ('url' url=EString)? ","
	//	type=ImageType
	//	'}';
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Widget:
	//	'Widget'
	//	name=EString
	//	':' widgettype=[WidgetType|EString] ('{' widgetelements+=ContentElement ("," widgetelements+=ContentElement)*)? '}';
	public WidgetElements getWidgetAccess() {
		return pWidget;
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}
	
	//Text:
	//	'Text'
	//	'{' ('html' html=EString)?
	//	'}';
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Number:
	//	'Int' '{' num=EInt? '}';
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Literal:
	//	'Literal' '{' literal=EString? '}';
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Composite_Impl Composite:
	//	{Composite}
	//	'Composite';
	public Composite_ImplElements getComposite_ImplAccess() {
		return pComposite_Impl;
	}
	
	public ParserRule getComposite_ImplRule() {
		return getComposite_ImplAccess().getRule();
	}
	
	//Video:
	//	{Video}
	//	'Video'
	//	'{' ('id' id=EString)? "," ('title' title=EString)? "," ('type' type=VideoType)?
	//	'}';
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}
	
	//SimpleElement_Impl SimpleElement:
	//	{SimpleElement}
	//	'SimpleElement';
	public SimpleElement_ImplElements getSimpleElement_ImplAccess() {
		return pSimpleElement_Impl;
	}
	
	public ParserRule getSimpleElement_ImplRule() {
		return getSimpleElement_ImplAccess().getRule();
	}
	
	//PlaceHolder:
	//	'Placeholder'
	//	type=[Type|EPrimitiveTypes];
	public PlaceHolderElements getPlaceHolderAccess() {
		return pPlaceHolder;
	}
	
	public ParserRule getPlaceHolderRule() {
		return getPlaceHolderAccess().getRule();
	}
	
	//Game:
	//	{Game}
	//	'Game'
	//	'{' ('id' id=EString)?
	//	'}';
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//FieldValue:
	//	name=EString
	//	':' fieldvalue=ContentElement;
	public FieldValueElements getFieldValueAccess() {
		return pFieldValue;
	}
	
	public ParserRule getFieldValueRule() {
		return getFieldValueAccess().getRule();
	}
	
	//RecordValue:
	//	'{'
	//	recordvalues+=FieldValue ("," recordvalues+=FieldValue)*
	//	'}';
	public RecordValueElements getRecordValueAccess() {
		return pRecordValue;
	}
	
	public ParserRule getRecordValueRule() {
		return getRecordValueAccess().getRule();
	}
	
	//ListValue:
	//	'['
	//	listvalues+=ContentElement ("," listvalues+=ContentElement)*
	//	']';
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//WidgetType:
	//	{WidgetType}
	//	'widget'
	//	name=EString
	//	'{'
	//	widgettypeelements+=[Type|EPrimitiveTypes] ("," widgettypeelements+=[Type|EPrimitiveTypes])*
	//	'}';
	public WidgetTypeElements getWidgetTypeAccess() {
		return pWidgetType;
	}
	
	public ParserRule getWidgetTypeRule() {
		return getWidgetTypeAccess().getRule();
	}
	
	//CompositeType_Impl CompositeType:
	//	{CompositeType}
	//	'CompositeType'
	//	name=EString;
	public CompositeType_ImplElements getCompositeType_ImplAccess() {
		return pCompositeType_Impl;
	}
	
	public ParserRule getCompositeType_ImplRule() {
		return getCompositeType_ImplAccess().getRule();
	}
	
	//enum SectionType:
	//	BackgroundImage | BackgroundColour;
	public SectionTypeElements getSectionTypeAccess() {
		return eSectionType;
	}
	
	public EnumRule getSectionTypeRule() {
		return getSectionTypeAccess().getRule();
	}
	
	//Section:
	//	{Section}
	//	'Section'
	//	name=EString
	//	'{' ('image' image=EString)? ('title' title=EString)? ('type' type=SectionType)? (rows+=Row ("," rows+=Row)*)?
	//	'}';
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//terminal PrimitiveTypes:
	//	'VideoType' | 'ImageType' | 'TextType' | 'GameType' | 'IntType' | 'Any';
	public TerminalRule getPrimitiveTypesRule() {
		return tPrimitiveTypes;
	}
	
	//EPrimitiveTypes:
	//	EString | PrimitiveTypes;
	public EPrimitiveTypesElements getEPrimitiveTypesAccess() {
		return pEPrimitiveTypes;
	}
	
	public ParserRule getEPrimitiveTypesRule() {
		return getEPrimitiveTypesAccess().getRule();
	}
	
	//SimpleType:
	//	{SimpleType} name=PrimitiveTypes;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//RecordType:
	//	name=EString
	//	'{'
	//	recordtype+=Field ("," recordtype+=Field)*
	//	'}';
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}
	
	//Field:
	//	name=EString
	//	':' fieldtype=[Type|EPrimitiveTypes];
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//ListType:
	//	name=EString
	//	'{'
	//	'list_of' listtype=[Type|EPrimitiveTypes]
	//	'}';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
